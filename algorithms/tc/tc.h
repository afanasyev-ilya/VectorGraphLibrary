#pragma once
#include <vector>
#include <queue>
#include <cstring>
#include <iostream>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define TC TransitiveClosure

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define vect_min(a,b) ((a)<(b)?(a):(b))
#define vect_max(a,b) ((a)>(b)?(a):(b))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class TransitiveClosure
{
public:
    // architecture-independent API example. same function for NEC, multicore, GPU
    static double vgl_purdoms(VGL_Graph &_graph, vector<pair<int,int>> &_vertex_pairs, vector<int> &_answer);

    static double vgl_bfs_based(VGL_Graph &_graph, vector<pair<int,int>> &_vertex_pairs, vector<int> &_answer);
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "tc.hpp"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
