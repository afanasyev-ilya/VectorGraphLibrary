#pragma once

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Timer::Timer()
{
    t_start = omp_get_wtime();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Timer::start()
{
    t_start = omp_get_wtime();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Timer::end()
{
    t_end = omp_get_wtime();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double Timer::get_time()
{
    return (t_end - t_start);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double Timer::get_time_in_ms()
{
    return (t_end - t_start)*1000.0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Timer::print_bandwidth_stats(string _name, long long _elements, double _bytes_per_element)
{
    double bytes = _elements * _bytes_per_element;
    cout << _name << " BW: " << bytes/(this->get_time()*1e9) << " GB/s" << endl << endl;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Timer::print_time_stats(string _name)
{
    cout << _name << " time: " << this->get_time() << " (s)" << endl;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Timer::print_time_and_bandwidth_stats(string _name, long long _elements, double _bytes_per_element)
{
    double bytes = _elements * _bytes_per_element;
    cout << _name << " time: " << this->get_time() << " (s)" << endl;
    cout << _name << " BW: " << bytes/(this->get_time()*1e9) << " (GB/s)" << endl << endl;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
